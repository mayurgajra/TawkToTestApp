package com.mayurg.tawktotestapp.di

import android.content.Context
import androidx.room.Room
import com.mayurg.tawktotestapp.data.local.GitHubDatabase
import com.mayurg.tawktotestapp.data.remote.GithubAPI
import com.mayurg.tawktotestapp.utils.Constants.BASE_URL
import com.mayurg.tawktotestapp.utils.Constants.GITHUB_DATABASE_NAME
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import okhttp3.Dispatcher
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

/**
 * Dagger-Hilt module for the singleton dependencies
 *
 * Dependency classes are generated by Dagger-Hilt based on the provides method
 * so that we can easily inject the dependencies in our consumer classes
 */
@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideGithubDatabase(
        @ApplicationContext context: Context
    ) = Room.databaseBuilder(context, GitHubDatabase::class.java, GITHUB_DATABASE_NAME).build()

    @Provides
    @Singleton
    fun provideUsersListDao(
        db: GitHubDatabase
    ) = db.getUsersListDao()

    @Provides
    @Singleton
    fun providesGithubApi(): GithubAPI {
        val dispatcher = Dispatcher()
        dispatcher.maxRequests = 1

        val client = OkHttpClient.Builder()
            .dispatcher(dispatcher)
            .build()

        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(GithubAPI::class.java)
    }


}