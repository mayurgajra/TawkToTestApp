package com.mayurg.tawktotestapp.ui.userprofile

import android.os.Bundle
import android.view.View
import androidx.activity.viewModels
import com.mayurg.tawktotestapp.R
import com.mayurg.tawktotestapp.data.entities.ModelUserResponseItem
import com.mayurg.tawktotestapp.databinding.ActivityUserProfileBinding
import com.mayurg.tawktotestapp.ui.BaseActivity
import com.mayurg.tawktotestapp.utils.ConnectivityUtils
import com.mayurg.tawktotestapp.utils.Constants.ARG_LOGIN_ID
import com.mayurg.tawktotestapp.utils.hideKeyboard
import com.mayurg.tawktotestapp.utils.loadImage
import com.mayurg.tawktotestapp.utils.setSafeText
import com.mayurg.tawktotestapp.viewmodels.UserProfileViewModel
import dagger.hilt.android.AndroidEntryPoint

/**
 * UI to display the selected Github user's profile
 */
@AndroidEntryPoint
class UserProfileActivity : BaseActivity() {

    /**
     * [viewModel] is responsible to fetch and process the data provided by data repository
     */
    private val viewModel: UserProfileViewModel by viewModels()

    /**
     * View binding class autogenerated, provides access to the views of profile activity
     */
    private lateinit var binding: ActivityUserProfileBinding

    companion object {
        /**
         * Key to save and get the text of notes edittext when device rotates
         */
        const val KEY_NOTES = "notes"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        bindView()
        val login = setArguments()
        observeViewModel()
        setOnViewClickListeners(login)
        setSwipeRefreshListener()
    }

    /**
     * Binds the view of the activity and set the support actionbar
     */
    private fun bindView() {
        binding = ActivityUserProfileBinding.inflate(layoutInflater)
        setContentView(binding.root)
    }

    /**
     * gets the intent arguments and set to the viewmodel
     *
     * @return String login id of the selected user
     */
    private fun setArguments(): String {
        val login = intent?.getStringExtra(ARG_LOGIN_ID) ?: ""
        viewModel.login = login
        return login
    }

    /**
     * Observe the changes to viewmodel and updates ui accordingly
     */
    private fun observeViewModel() {
        viewModel.user.observe(this, {
            hideLoading()
            setData(it)
        })

        viewModel.error.observe(this, {
            if (!it.isNullOrEmpty()) {
                hideLoading()
                if (!ConnectivityUtils.hasInternetConnection(this)) {
                    showSnackBar(
                        binding.root,
                        getString(R.string.no_internet_msg),
                        getString(R.string.got_it)
                    )
                } else {
                    showSnackBar(binding.root, it)
                }
            }
        })
    }

    /**
     * Hides the shimmer & loading spinner when we have the data
     */
    private fun hideLoading() {
        binding.shimmerLoadingUserProfileLayout.visibility = View.GONE
        binding.refreshLayout.isRefreshing = false
    }

    /**
     * Sets the view click listeners for saving the note and back arrow
     */
    private fun setOnViewClickListeners(login: String) {
        binding.btnSave.setOnClickListener {
            binding.tieNotes.hideKeyboard()
            viewModel.saveNote(binding.tieNotes.text.toString(), login)
            showSnackBar(binding.root, getString(R.string.note_saved))
        }

        binding.ivBack.setOnClickListener {
            onBackPressed()
        }
    }

    /**
     * Sets the refresh listener and refreshes the data when users pulls down to refresh
     */
    private fun setSwipeRefreshListener() {
        binding.refreshLayout.setOnRefreshListener {
            viewModel.refreshData()
        }
    }


    /**
     * Saves the text from edittext when activity configuration changes
     */
    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putString(KEY_NOTES, binding.tieNotes.text.toString())
    }

    /**
     * Gets the text back and sets it to edittext when activity instance is restored
     */
    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        super.onRestoreInstanceState(savedInstanceState)
        setNotes(savedInstanceState.getString(KEY_NOTES, ""))
    }

    /**
     * set the profile data acquired from the view model
     */
    private fun setData(data: ModelUserResponseItem) {
        binding.tvUserName.setSafeText(data.login)
        binding.tvName.setSafeText(data.name)
        binding.ivUserProfile.loadImage(data.avatarUrl)
        binding.tvFollowers.setSafeText(getString(R.string.followers,data.followers))
        binding.tvFollowing.setSafeText(getString(R.string.following,data.following))
        binding.tvCompany.setSafeText(data.company)
        binding.tvBlog.setSafeText(data.blog)
        setNotes(data.note ?: "")
    }

    /**
     * Sets the note text and sets the cursor at the end of the text
     */
    private fun setNotes(note: String) {
        binding.tieNotes.setText(note)
        binding.tieNotes.setSelection(binding.tieNotes.text?.length ?: 0)
    }

    /**
     * Used to refresh data when the internet available or show the message if internet not available
     */
    override fun onInternetChange(isAvailable: Boolean) {
        super.onInternetChange(isAvailable)
        if (isAvailable) {
            viewModel.refreshData()
        } else {
            showSnackBar(
                binding.root,
                getString(R.string.no_internet_msg),
                getString(R.string.got_it)
            )
        }
    }

}